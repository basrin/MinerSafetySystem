<!DOCTYPE html>
<html>
<head>
    <title>Miner Safety System</title>
    <link rel="stylesheet" type="text/css" href="css/normalize.css">
    <link rel="stylesheet" type="text/css" href="css/styles.css">
</head>
<body>
    <div class="container">
        <div class="row clearfix">
            <div class="column full">
                <h1>Miner Safety System</h1>
                <h2>View Attribute History By Estimote</h2>
                <div id="mote-temp-over-time">
                    <label for="estimote-ids">Select an Estimote: </label>
                    <select id="estimote-ids"></select>
                    <label for="estimote-attributes">Select a Measurement: </label>
                    <select id="estimote-attributes"></select>
                    <div id="mote-chart"></div>
                </div>
            </div>
        </div>
        <div class="row clearfix">
            <div class="column full">
                <h1>All Temperatures</h1>
                <button>Save test data!</button>
                <div id="all-measured-temperatures"></div>
                <div id="example"></div>
                <div class="ejs"> <%= ejsData %></div>
            </div>
        </div>
        <div class="row clearfix">
            <div class="column full">

            </div>
        </div>
    </div>
    <script src="https://cdn.socket.io/socket.io-1.0.6.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript">

    $(document).ready(function () {
        // Create database test data
        $('button').on('click', function () {
            var data = {
              moteId: "someMoteId-" + Math.floor((Math.random()*100)/2),
              date: new Date(),
              temperature: ((Math.random()*10)/5)*(Math.pow(-1, Math.floor(Math.random()*10))),
              orientation: Math.floor(Math.random()*10),
            };

            $.post("/data", data, function(data,status){
                console.log("Data: ", data, "\nStatus: ", status);
            });
        });
    });

        // Load the Visualization API and the piechart package.
        google.load('visualization', '1.0', {'packages':['corechart']});

        // Set a callback to run when the Google Visualization API is loaded.
        google.setOnLoadCallback(loadDB);

        function loadDB () {
            $.post("/data", function(mongoData, status){
                console.log(mongoData);
                var mongoData = mongoData.dbValueArray;

                // now we can use mongoDB data
                drawLineChart({
                    id : 'all-measured-temperatures',
                    columns: [
                        {title:'MoteId', type:'string'},
                        {title:'Temperature', type:'number'}
                    ],
                    rows: getAllTemperatures(mongoData),
                    title: 'All Mine Temperatures Ever',
                    width:'100%',
                    height:500
                });

                fillSelectBoxWithMoteIds(mongoData, 'estimote-ids');

                var idSelectBox = $('#estimote-ids');
                var attributeSelectBox = $('#estimote-attributes');
                var attributes = [
                    'temperature',
                    'orientation',
                ];
                for (var i = 0; i < attributes.length; i++) {
                    attributeSelectBox.append($('<option/>').attr('value', attributes[i]).text(attributes[i]));
                }

                function updateAttributeChart () {
                    attrVal = attributeSelectBox.val();
                    idVal   = idSelectBox.val();

                    drawLineChart({
                        id : 'mote-chart',
                        columns: [
                            {title:'Date', type:'string'},
                            {title: this.value, type:'number'}
                        ],
                        rows: getAttrHistoryByMote(mongoData, idVal, attrVal),
                        title: attrVal.slice(0,1).toUpperCase() + attrVal.slice(1) + ' History of ' + idVal,
                        width:'100%',
                        height:500
                    });
                }
                updateAttributeChart();
                attributeSelectBox.on('change', updateAttributeChart);
                idSelectBox.on('change', updateAttributeChart);

            });
        }

        // boxes is array of objects with id, prop properties
        // where id is the jqSelector for the select box and
        // prop is the mote property from the DB schema
        function fillSelectBoxes(data, boxes) {
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < boxes.length; j++) {
                    var optionVal =  data[i][boxes[j].prop];
                    var jqBoxes = {};
                    if (boxes[j].id.length && typeof boxes.id === "object") {
                        jqBoxes = $(boxes[j].id[0]);
                        for (var k = 1; k < boxes[j].id.length; k++) {
                            jqBoxes.add($(boxes[j].id[k]));
                        }
                    } else {
                        jqBoxes = $(boxes[j].id)
                    }
                    jqBoxes.append($('<option/>').attr('value', optionVal).text(optionVal));
                }
            }
        }

        function fillSelectBoxWithMoteIds (data, selectBoxId) {
            var selectBox = $('#' + selectBoxId);
            var ids = [];
            for (var i = 0; i < data.length; i++) {
                if (ids.indexOf(data[i].moteId) == -1) {
                    var id = data[i].moteId;
                    ids.push(id);
                    selectBox.append($('<option/>').attr('value', id).text(id));
                }
            }
        }

        function getAttrHistoryByMote(data, id, attr) {
            var rows = [];
            for (var i = 0; i < data.length; i++) {
                if (data[i].moteId == id) {
                    rows.push([data[i].date, data[i][attr]]);
                }
            }
            return rows;
        }

        function getAllTemperatures (data) {
            var temperatureRows = [];
            for (var i = 0; i < data.length; i++) {
                temperatureRows.push([data[i].moteId, data[i].temperature]);
            }
            return temperatureRows;
        }

        function drawLineChart (options) {
            var dataTable = new google.visualization.DataTable();
            for (var i = 0; i < options.columns.length; i++) {
                dataTable.addColumn(options.columns[i].type, options.columns[i].title);
            }
            dataTable.addRows(options.rows);

            var chart = new google.visualization.LineChart(document.getElementById(options.id));
            chart.draw(dataTable, options);

        }


    </script>
</body>
</html>